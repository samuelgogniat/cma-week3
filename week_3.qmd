---
title: "week_3"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

## Preperation

```{r}
library("readr")
library("dplyr")
library("ggplot2")

wildschwein <- read_csv("wildschwein_BE_2056.csv") 

sabi <- wildschwein |> #filter Data for better overview
  filter(TierName == "Sabi") |> 
  filter(DatetimeUTC >= as.POSIXct("2015-07-01", tz="UTC"), DatetimeUTC < as.POSIXct("2015-07-03", tz="UTC"))


ggplot(sabi, aes(E, N, color=DatetimeUTC))+ #plot for a first look
  geom_point()+
  geom_path()+
  coord_equal()

#Step a)

sabi |>  
  head(50) |> 
  ggplot(aes(DatetimeUTC, 1)) +
  geom_point()

#sampling interval of approx. 15min. If we take a moving window of 60minutes, we need 4 fixes

#Step b)

sabi <- sabi |> #calculating moving window
  mutate(
    n_plus1 = sqrt((lead(E,1)-E)^2 + (lead(N,1)-N)^2),
    n_plus2 = sqrt((lead(E,2)-E)^2 + (lead(N,2)-N)^2),
    n_minus1 = sqrt((lag(E,1)-E)^2 + (lag(N,1)-N)^2),
    n_minus2 = sqrt((lag(E,2)-E)^2 + (lag(N,2)-N)^2)
         )

sabi <- sabi |> #calculating rowwise mean distance
  rowwise() |> 
  mutate(
    stepMean = mean(c(n_minus1,n_minus2,n_plus1,n_plus2))
  ) |> 
  ungroup()

#Step c)

ggplot(sabi, aes(stepMean))+ #having a look at threshold we could use to separate "static" points from movements
  geom_histogram(binwidth = 10)+
  geom_vline(xintercept = mean(sabi$stepMean, na.rm=T)) #mean of stepMean 

sabi |> #ploting static points vs. movements to see if threshold seems to be reasonable 
  mutate(static = stepMean < mean(stepMean, na.rm=T)) |> 
  ggplot(aes(E,N))+
  geom_path()+
  geom_point(aes(color=static))+
  coord_fixed()

sabi <- sabi |> #implement the rule
    ungroup() |>
    mutate(static = stepMean < mean(stepMean, na.rm = TRUE))

sabi_filter <- sabi |> #filter out all non-static points
    filter(!static)

sabi_filter |> #plot with movement only
    ggplot(aes(E, N)) +
    geom_path() +
    geom_point() +
    coord_fixed() 

```

# Import Posmo Data

```{r}
library("readr")
library("sf")

posmo <- read_delim("private/posmo_2023-01-01T00 00 00+01 00-2023-05-01T23 59 59+02 00.csv")
# Keep only the necessary columns
posmo <- select(posmo, datetime, lon_x, lat_y)

posmo <- st_as_sf(posmo, coords = c("lon_x","lat_y"), crs = 4326) |>  #cs is transformed to 2056
  st_transform(2056)

posmo_coordinates <- st_coordinates(posmo) #coordinates are extracted

posmo <- cbind(posmo, posmo_coordinates) #coordinates are binded in separate columns

posmo_filter <- posmo |>
    filter(as.Date(datetime) == "2023-04-27") #single day is selected

```

## Task 1

```{r}

#first plot for overview
ggplot(posmo_filter, aes(X, Y, color=datetime))+ #plot for a first look
  geom_point()+
  geom_path()+
  coord_equal()

posmo_filter |>  
  head(50) |> 
  ggplot(aes(datetime, 1)) +
  geom_point()
#very dense sampling rate, approx. every 5s. When using 4fixes, we  have a window of 20s.That may be to small?

posmo_filter <- posmo_filter |> #calculating moving window
  mutate(
    n_plus1 = sqrt((lead(X,1)-X)^2 + (lead(Y,1)-Y)^2),
    n_plus2 = sqrt((lead(X,2)-X)^2 + (lead(Y,2)-Y)^2),
    n_minus1 = sqrt((lag(X,1)-X)^2 + (lag(Y,1)-Y)^2),
    n_minus2 = sqrt((lag(X,2)-X)^2 + (lag(Y,2)-Y)^2)
)

posmo_filter <- posmo_filter |> 
  rowwise() |> 
  mutate(
    stepMean = mean(c(n_minus1,n_minus2,n_plus1,n_plus2))
  ) |> 
  ungroup()
```

## Task 2 + 3

```{r}
ggplot(posmo_filter, aes(stepMean))+ #having a look at threshold we used before with sabi
  geom_histogram(binwidth = 10)+
  geom_vline(xintercept = mean(posmo_filter$stepMean, na.rm=T)) #for me it seems to be too low? I will try and come back if necessary

posmo_filter |> #ploting to see if threshold seems to be reasonable 
  mutate(static = stepMean < mean(stepMean, na.rm=T)) |> 
  ggplot(aes(X,Y))+
  geom_path()+
  geom_point(aes(color=static))+
  coord_fixed()

#threshold seems to not be working at all, as my relevant movement (going to work and back) is considered static, while the "Noise" (movements at work) is considered as movements. 

#I will try some different thresholds.

#median:

ggplot(posmo_filter, aes(stepMean))+ 
  geom_histogram(binwidth = 10)+
  geom_vline(xintercept = median(posmo_filter$stepMean, na.rm=T)) #threshold lower

posmo_filter |> #using median for plot
  mutate(static = stepMean < median(stepMean, na.rm=T)) |> 
  ggplot(aes(X,Y))+
  geom_path()+
  geom_point(aes(color=static))+
  coord_fixed()

#now there are just less static points, but its still kind of the wrong way

#0.75 quantile:
ggplot(posmo_filter, aes(stepMean))+ 
  geom_histogram(binwidth = 10)+
  geom_vline(xintercept = quantile(posmo_filter$stepMean,0.75,na.rm=T)) #threshold between median and mean

posmo_filter |> #using 0.75-quantile for plot
  mutate(static = stepMean < quantile(stepMean, 0.75, na.rm=T)) |> 
  ggplot(aes(X,Y))+
  geom_path()+
  geom_point(aes(color=static))+
  coord_fixed()

#not better. I suggest the following problem: If I'm at work at a "fenced" place, Posmo stops collecting data points. If it then starts again later, there is a huge gap, and the steplength is accordingly huge too. These outliners make my actual movement seem so slow, that it's considered as static. Maybe changing the temporal window may help ? Or a upper threshold could be used? 

#bigger temporal window: v. I will use data points every 1 and 2 minutes:

posmo_filter <- posmo_filter |> 
  mutate(
    n_plus1 = sqrt((lead(X,12)-X)^2 + (lead(Y,12)-Y)^2),
    n_plus2 = sqrt((lead(X,24)-X)^2 + (lead(Y,24)-Y)^2),
    n_minus1 = sqrt((lag(X,12)-X)^2 + (lag(Y,12)-Y)^2),
    n_minus2 = sqrt((lag(X,24)-X)^2 + (lag(Y,24)-Y)^2)
)

posmo_filter <- posmo_filter |> 
  rowwise() |> 
  mutate(
    stepMean = mean(c(n_minus1,n_minus2,n_plus1,n_plus2))
  ) |> 
  ungroup()

ggplot(posmo_filter, aes(stepMean))+ 
  geom_histogram(binwidth = 10)+
  geom_vline(xintercept = mean(posmo_filter$stepMean, na.rm=T)) 

posmo_filter <- posmo_filter |> #filter out all non-static points
    filter(!static)

posmo_filter |> 
  mutate(static = stepMean < mean(stepMean, na.rm=T)) |> 
  ggplot(aes(X,Y))+
  geom_path()+
  geom_point(aes(color=static))+
  coord_fixed()

#seems better, although still not perfect. 

posmo_filter <- posmo_filter |> #implement the rule
    ungroup() |>
    mutate(static = stepMean < mean(stepMean, na.rm=T))


posmo_filter |> 
    filter(!static) |> #filter out all non-static points
    ggplot(aes(X, Y)) + #plot with movement only
    geom_path() +
    geom_point() +
    coord_fixed()

```

## Task 4

```{r}

rle_id <- function(vec) {
    x <- rle(vec)$lengths
    as.factor(rep(seq_along(x), times = x))
} #function to assign unique ID for each segment

posmo_filter <- posmo_filter |>
    mutate(segment_id = rle_id(static))

head(posmo_filter)

posmo_filter <- posmo_filter |> #filter out all non-static points
    filter(!static)

#plot with colors according to segment IDs:
ggplot(posmo_filter,aes(X, Y, color = segment_id)) +
    geom_path() +
    geom_point() +
    coord_fixed() +
    theme(legend.position = "none")+
    labs(title = "Moving segments coloured by segment ID", subtitle="All segments (uncleaned)")

posmo_filter <- posmo_filter |> 
  group_by(segment_id) |> 
  mutate(time_lag = as.numeric(difftime(lead(datetime), datetime))) |> 
  filter(sum(time_lag, na.rm=T)>300) #filter out every segment with less than 5min
  
ggplot(posmo_filter, aes(X, Y, color = segment_id)) +
    geom_path() +
    geom_point() +
    coord_fixed() +
    theme(legend.position = "bottom")+
    labs(title = "Moving segments coloured by segment ID", subtitle="removed segments <5minutes")

```

## Task 5
